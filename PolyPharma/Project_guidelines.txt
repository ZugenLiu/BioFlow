This file regroups the TODOs for the project in the future.
***********************************************************


Add additional Sources/Dimensioins
==================================

# TODO: perform a recovery of important domains from PDB

# TODO: perform a recovery of post-translational modification sites in the normal proteins

# TODO: Perform a recovery of a larger database of the RNAs, both as protein transcription elements and as regulatory
#       elements

# TODO: Import the DNA / epigenetic annotation ontology into the database to account for the DNA (un)-availability
#       and for the DNA transport towards specific (activation or repression regions)

# TODO: Cast in the database Protein Aboundances so that it becomes one-and-for-all import
#       Problem: what are we to do in case we are willing to use a specific organ and not a general database?

# TODO: Add ENSEMBL idnetifiers and gene names indexing

# TODO: In the Uniprot insertions, switch from the hard filtering (inserting only uniprots with acnums accessible)
#       from the reactome to ALL the uniprots, but using the "inclusion parameter.

# TODO: add organ specificity levels of protein expression

# TODO: remove hard filtration on too participative nodes; instead treat it with variational coefficients



Improve crosslinking between different databases
================================================

# TODO: perform a search in the UNIPROT Database in order to imoprove the annotation based on the DisplayNames
#           => this is done separately by a matching/lookup module

# TODO: we might want to parse the traceability of the all the compounds and link by adding the xref parsed
#       information to them. This might be critical to adress the issues imposed by the difference in the database
#       versions

# TODO: import modification feature insertion from the reactome database to account for post-translational
#       modifications

# TODO: verify if GO_Terms analysis conserves the "regulation relations or not.

# TODO: add fulltext indexes to the nodes





From the mathematical point of view
===================================

# TODO: Get rid of Cholesky decomposition: it is not appliable in our case because of presence of null eigenvalues
# In fact there are as many null eigenvalues as there are connex segments in the graph

# TODO: replace pickling by JSON wherever appliable

# TODO: add the clustering of proteins according to the GO annotation similarity

# TODO: add the evaluations of Zipf-ittude for the proteins

# TODO: add random matrix filtering-out for the "too noizy" conductions

# TODO: for the computation of the relevant computational values, normalize the connections
#       Graph. Use a laplacian instead of the default graph for the decorrelation

# TODO: add derivatives to analyse scaling factors on for element participation in a complex:
#       Is this complex a limiting factor for this complex or not?. In case of level variation
#       derivative will be the measure for the amount of the trafficked information, whereas
#       in case of substantial modification (mutation silencing catalytical factor, this will)
#       be the only available one.

# TODO: add negative/positive potentials for the linkages to the GO terms for true
#       Up/Down regulation

# TODO: orient Zipf-central concepts for different environements
#       (yeah, but this is direct biasis, isn't it?) => Better deduce your own Zipf-distribution

# TODO: analyse the sign-connexity of the GO terms analysis tools

# TODO: add an adaptor for markov model-like analysis
        - Problem 1: if we operate big graphs, we are liklely to run out of memory
        - Problem 2: we cannot necessary normalise all the vectors, since some proteins are
                    affecting several proteins at the same time

Utils module
============

# TODO: In the xml_doctor, add correlation between presencesof different subtypes in the references?



Current Limitations
===================

Limitations: no physical-path toxicity (such as rising pH, changing the O2 content or depleting ATP/ADP)


To be treated:
==============

    # If a specific set of GO_Terms is put down, we can say that the function they describe is down.
    # Recall v.s. precision for a GO array for a perturbed protein set?
    # Non-randomness of a recall?
    # Pathway structure?

    # Method extendable to inhibition / activation binaries, by introducing positive / negative values for the matrix

    # Fill in the matrix with the values
    # Take an impact vector
    # Continue multiplications as long as needed for convergence

    # export the matrix as a flat file
    #    => Most significantly touched elements, especially in the UNIPORT
    #    => Get the vector of affected proteins, then multiply it over the transfer
    #        Matrix until an equilibrium is reached.

    # Pay attention to the criticality spread => vector shoud increase exponentially for the important prots, effectively shutting down the whole system
    # But not in the case of "unimportant proteins"

    # => Assymetric influence matrices (causality followship)
    # Markov clustering linalgebra on sparce matrices to accelerate all this shit?

    # We could actually envision it as a chain reaction in a nuclear reactor, leading either to a reaction spiraling out of control (total functional shutdown, at least for a
    # given function.

    # Idea behind the eigenvectors: if we generate random sets of genes perturbating the network, some combination would lead to a way more powerful effect when propagated
    # in a markovian, turn-based network (runaway), whereas other sets will lead to a lighter runaway. A way to estimate runaway specifics of protein-protein interaction network
    # The strongest runaway would be generated by the highest absolute-value link

    # Group node definintion have to be corrected so they are not all related together but instead are linked towards the central "group" node!!!!