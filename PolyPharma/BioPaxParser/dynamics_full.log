DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "vertex"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "edge"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Location"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "AnnotNode"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Originating_Organism"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "DNA"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "RNA"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Protein"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Small_Molecule"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "PhysicalEntity"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Complex"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Instance"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Modification_Feature"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "DNA Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "RNA_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Protein_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Small_Molecule_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "PhysicalEntity_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Complex_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "TemplateReaction"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Degradation"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Biochemical_Reaction"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_localized"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_annotated"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_originating_in_organism"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_part_of_complex"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_modified_to "} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_able_to_modify"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_part_of_collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_Catalysant"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_Regulant"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_reaction_particpant"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic vesicle", "ID": "CellularLocationVocabulary18"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagolysosome", "ID": "CellularLocationVocabulary19"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "nuclear envelope", "ID": "CellularLocationVocabulary10"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum membrane", "ID": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endosome", "ID": "CellularLocationVocabulary12"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cell junction", "ID": "CellularLocationVocabulary13"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endocytic vesicle membrane", "ID": "CellularLocationVocabulary14"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endocytic vesicle lumen", "ID": "CellularLocationVocabulary15"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum lumen", "ID": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "integral to lumenal side of endoplasmic reticulum membrane", "ID": "CellularLocationVocabulary17"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "integral to cytosolic side of endoplasmic reticulum membrane", "ID": "CellularLocationVocabulary83"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted gamma-aminobutyric acid transport vesicle lumen", "ID": "CellularLocationVocabulary82"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted gamma-aminobutyric acid transport vesicle", "ID": "CellularLocationVocabulary81"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted gamma-aminobutyric acid transport vesicle membrane", "ID": "CellularLocationVocabulary80"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrion", "ID": "CellularLocationVocabulary86"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "proteinaceous extracellular matrix", "ID": "CellularLocationVocabulary85"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum quality control compartment", "ID": "CellularLocationVocabulary84"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic cup", "ID": "CellularLocationVocabulary36"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "peroxisomal membrane", "ID": "CellularLocationVocabulary37"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "secretory granule lumen", "ID": "CellularLocationVocabulary34"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "viral envelope", "ID": "CellularLocationVocabulary35"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "Golgi lumen", "ID": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "azurophil granule lumen", "ID": "CellularLocationVocabulary33"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endosome membrane", "ID": "CellularLocationVocabulary30"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial outer membrane", "ID": "CellularLocationVocabulary31"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "peroxisomal matrix", "ID": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial matrix", "ID": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "early endosome lumen", "ID": "CellularLocationVocabulary21"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic vesicle membrane", "ID": "CellularLocationVocabulary20"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "trans-Golgi network membrane", "ID": "CellularLocationVocabulary23"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-coated endocytic vesicle membrane", "ID": "CellularLocationVocabulary22"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "transport vesicle membrane", "ID": "CellularLocationVocabulary25"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "lysosomal membrane", "ID": "CellularLocationVocabulary24"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endolysosome membrane", "ID": "CellularLocationVocabulary27"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "lysosomal lumen", "ID": "CellularLocationVocabulary26"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endosome lumen", "ID": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endolysosome lumen", "ID": "CellularLocationVocabulary28"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense tubular network membrane", "ID": "CellularLocationVocabulary54"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "external side of plasma membrane", "ID": "CellularLocationVocabulary55"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "internal side of plasma membrane", "ID": "CellularLocationVocabulary56"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "sarcoplasmic reticulum lumen", "ID": "CellularLocationVocabulary57"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "early endosome", "ID": "CellularLocationVocabulary50"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "transport vesicle", "ID": "CellularLocationVocabulary51"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cytoplasmic vesicle membrane", "ID": "CellularLocationVocabulary52"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense tubular network lumen", "ID": "CellularLocationVocabulary53"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "sarcoplasmic reticulum membrane", "ID": "CellularLocationVocabulary58"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial intermembrane space", "ID": "CellularLocationVocabulary59"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "secretory granule membrane", "ID": "CellularLocationVocabulary47"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic vesicle lumen", "ID": "CellularLocationVocabulary46"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "synaptic vesicle membrane", "ID": "CellularLocationVocabulary45"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "synaptic vesicle", "ID": "CellularLocationVocabulary44"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "late endosome membrane", "ID": "CellularLocationVocabulary43"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "late endosome lumen", "ID": "CellularLocationVocabulary42"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "photoreceptor disc membrane", "ID": "CellularLocationVocabulary41"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial inner membrane", "ID": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted monoamine transport vesicle membrane", "ID": "CellularLocationVocabulary49"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted monoamine transport vesicle lumen", "ID": "CellularLocationVocabulary48"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-coated endocytic vesicle", "ID": "CellularLocationVocabulary72"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "Golgi-associated vesicle membrane", "ID": "CellularLocationVocabulary73"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "periplasmic space", "ID": "CellularLocationVocabulary70"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cell wall", "ID": "CellularLocationVocabulary71"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted glutamate transport vesicle lumen", "ID": "CellularLocationVocabulary76"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted glutamate transport vesicle membrane", "ID": "CellularLocationVocabulary77"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cytoplasmic membrane-bounded vesicle lumen", "ID": "CellularLocationVocabulary74"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum-Golgi intermediate compartment", "ID": "CellularLocationVocabulary75"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted acetylcholine transport vesicle lumen", "ID": "CellularLocationVocabulary78"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted acetylcholine transport vesicle membrane", "ID": "CellularLocationVocabulary79"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "chromosome", "ID": "CellularLocationVocabulary6"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "chromosome, centromeric region", "ID": "CellularLocationVocabulary7"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "early endosome membrane", "ID": "CellularLocationVocabulary4"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "nucleoplasm", "ID": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "plasma membrane", "ID": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "extracellular region", "ID": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cytosol", "ID": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "Golgi membrane", "ID": "CellularLocationVocabulary8"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "ER to Golgi transport vesicle membrane", "ID": "CellularLocationVocabulary9"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "photoreceptor inner segment membrane", "ID": "CellularLocationVocabulary69"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "lipid particle", "ID": "CellularLocationVocabulary68"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet alpha granule membrane", "ID": "CellularLocationVocabulary65"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet alpha granule lumen", "ID": "CellularLocationVocabulary64"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "integrin complex", "ID": "CellularLocationVocabulary67"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "photoreceptor outer segment membrane", "ID": "CellularLocationVocabulary66"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "flagellar membrane", "ID": "CellularLocationVocabulary61"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "sperm flagellum", "ID": "CellularLocationVocabulary60"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense granule membrane", "ID": "CellularLocationVocabulary63"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense granule lumen", "ID": "CellularLocationVocabulary62"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "FDPS gene", "ID": "Dna34", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15347, "keys": null, "data": {}, "inV": 15331, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
ERROR    Null Property Error: 'payload' cannot be set to 'None'
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "vertex"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "edge"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Location"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "AnnotNode"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Originating_Organism"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "DNA"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "RNA"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Protein"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Small_Molecule"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "PhysicalEntity"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Complex"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Instance"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Modification_Feature"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "DNA Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "RNA_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Protein_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Small_Molecule_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "PhysicalEntity_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Complex_Collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "TemplateReaction"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Degradation"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/node  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "Biochemical_Reaction"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_localized"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_annotated"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_originating_in_organism"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_part_of_complex"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_modified_to "} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_able_to_modify"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_part_of_collection"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_Catalysant"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_Regulant"} 
DEBUG    POST url:  http://localhost:7474/db/data/index/relationship  
DEBUG    POST body: {"config": {"type": "exact", "provider": "lucene"}, "name": "is_reaction_particpant"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic vesicle", "ID": "CellularLocationVocabulary18"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagolysosome", "ID": "CellularLocationVocabulary19"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "nuclear envelope", "ID": "CellularLocationVocabulary10"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum membrane", "ID": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endosome", "ID": "CellularLocationVocabulary12"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cell junction", "ID": "CellularLocationVocabulary13"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endocytic vesicle membrane", "ID": "CellularLocationVocabulary14"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endocytic vesicle lumen", "ID": "CellularLocationVocabulary15"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum lumen", "ID": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "integral to lumenal side of endoplasmic reticulum membrane", "ID": "CellularLocationVocabulary17"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "integral to cytosolic side of endoplasmic reticulum membrane", "ID": "CellularLocationVocabulary83"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted gamma-aminobutyric acid transport vesicle lumen", "ID": "CellularLocationVocabulary82"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted gamma-aminobutyric acid transport vesicle", "ID": "CellularLocationVocabulary81"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted gamma-aminobutyric acid transport vesicle membrane", "ID": "CellularLocationVocabulary80"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrion", "ID": "CellularLocationVocabulary86"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "proteinaceous extracellular matrix", "ID": "CellularLocationVocabulary85"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum quality control compartment", "ID": "CellularLocationVocabulary84"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic cup", "ID": "CellularLocationVocabulary36"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "peroxisomal membrane", "ID": "CellularLocationVocabulary37"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "secretory granule lumen", "ID": "CellularLocationVocabulary34"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "viral envelope", "ID": "CellularLocationVocabulary35"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "Golgi lumen", "ID": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "azurophil granule lumen", "ID": "CellularLocationVocabulary33"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endosome membrane", "ID": "CellularLocationVocabulary30"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial outer membrane", "ID": "CellularLocationVocabulary31"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "peroxisomal matrix", "ID": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial matrix", "ID": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "early endosome lumen", "ID": "CellularLocationVocabulary21"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic vesicle membrane", "ID": "CellularLocationVocabulary20"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "trans-Golgi network membrane", "ID": "CellularLocationVocabulary23"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-coated endocytic vesicle membrane", "ID": "CellularLocationVocabulary22"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "transport vesicle membrane", "ID": "CellularLocationVocabulary25"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "lysosomal membrane", "ID": "CellularLocationVocabulary24"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endolysosome membrane", "ID": "CellularLocationVocabulary27"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "lysosomal lumen", "ID": "CellularLocationVocabulary26"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endosome lumen", "ID": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endolysosome lumen", "ID": "CellularLocationVocabulary28"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense tubular network membrane", "ID": "CellularLocationVocabulary54"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "external side of plasma membrane", "ID": "CellularLocationVocabulary55"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "internal side of plasma membrane", "ID": "CellularLocationVocabulary56"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "sarcoplasmic reticulum lumen", "ID": "CellularLocationVocabulary57"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "early endosome", "ID": "CellularLocationVocabulary50"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "transport vesicle", "ID": "CellularLocationVocabulary51"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cytoplasmic vesicle membrane", "ID": "CellularLocationVocabulary52"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense tubular network lumen", "ID": "CellularLocationVocabulary53"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "sarcoplasmic reticulum membrane", "ID": "CellularLocationVocabulary58"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial intermembrane space", "ID": "CellularLocationVocabulary59"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "secretory granule membrane", "ID": "CellularLocationVocabulary47"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "phagocytic vesicle lumen", "ID": "CellularLocationVocabulary46"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "synaptic vesicle membrane", "ID": "CellularLocationVocabulary45"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "synaptic vesicle", "ID": "CellularLocationVocabulary44"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "late endosome membrane", "ID": "CellularLocationVocabulary43"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "late endosome lumen", "ID": "CellularLocationVocabulary42"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "photoreceptor disc membrane", "ID": "CellularLocationVocabulary41"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "mitochondrial inner membrane", "ID": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted monoamine transport vesicle membrane", "ID": "CellularLocationVocabulary49"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted monoamine transport vesicle lumen", "ID": "CellularLocationVocabulary48"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-coated endocytic vesicle", "ID": "CellularLocationVocabulary72"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "Golgi-associated vesicle membrane", "ID": "CellularLocationVocabulary73"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "periplasmic space", "ID": "CellularLocationVocabulary70"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cell wall", "ID": "CellularLocationVocabulary71"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted glutamate transport vesicle lumen", "ID": "CellularLocationVocabulary76"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted glutamate transport vesicle membrane", "ID": "CellularLocationVocabulary77"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cytoplasmic membrane-bounded vesicle lumen", "ID": "CellularLocationVocabulary74"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "endoplasmic reticulum-Golgi intermediate compartment", "ID": "CellularLocationVocabulary75"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted acetylcholine transport vesicle lumen", "ID": "CellularLocationVocabulary78"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "clathrin-sculpted acetylcholine transport vesicle membrane", "ID": "CellularLocationVocabulary79"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "chromosome", "ID": "CellularLocationVocabulary6"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "chromosome, centromeric region", "ID": "CellularLocationVocabulary7"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "early endosome membrane", "ID": "CellularLocationVocabulary4"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "nucleoplasm", "ID": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "plasma membrane", "ID": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "extracellular region", "ID": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "cytosol", "ID": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "Golgi membrane", "ID": "CellularLocationVocabulary8"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "ER to Golgi transport vesicle membrane", "ID": "CellularLocationVocabulary9"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "photoreceptor inner segment membrane", "ID": "CellularLocationVocabulary69"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "lipid particle", "ID": "CellularLocationVocabulary68"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet alpha granule membrane", "ID": "CellularLocationVocabulary65"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet alpha granule lumen", "ID": "CellularLocationVocabulary64"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "integrin complex", "ID": "CellularLocationVocabulary67"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "photoreceptor outer segment membrane", "ID": "CellularLocationVocabulary66"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "flagellar membrane", "ID": "CellularLocationVocabulary61"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "sperm flagellum", "ID": "CellularLocationVocabulary60"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense granule membrane", "ID": "CellularLocationVocabulary63"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Location", "data": {"element_type": "Location", "displayName": "platelet dense granule lumen", "ID": "CellularLocationVocabulary62"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "FDPS gene", "ID": "Dna34", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15434, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000160752"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15434, "keys": null, "data": {}, "inV": 15435, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "ELOVL6 gene", "ID": "Dna33", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15436, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000170522"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15436, "keys": null, "data": {}, "inV": 15437, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "SQLE gene", "ID": "Dna32", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15438, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000104549"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15438, "keys": null, "data": {}, "inV": 15439, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "PMVK gene", "ID": "Dna31", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15440, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000163344"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15440, "keys": null, "data": {}, "inV": 15441, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "MVK gene", "ID": "Dna30", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15442, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000110921"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15442, "keys": null, "data": {}, "inV": 15443, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "ACACB gene", "ID": "Dna19", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15444, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000076555"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15444, "keys": null, "data": {}, "inV": 15445, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "ACACA gene", "ID": "Dna18", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15446, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000132142"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15446, "keys": null, "data": {}, "inV": 15447, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "MIR34A gene", "ID": "Dna11", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15448, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000207865"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15448, "keys": null, "data": {}, "inV": 15449, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "MIR34C gene", "ID": "Dna13", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15450, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000207562"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15450, "keys": null, "data": {}, "inV": 15451, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "MIR34B gene", "ID": "Dna12", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15452, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000207811"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15452, "keys": null, "data": {}, "inV": 15453, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "ALAS1 gene", "ID": "Dna15", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15454, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000023330"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15454, "keys": null, "data": {}, "inV": 15455, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "HMGCR gene", "ID": "Dna14", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15456, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000113161"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15456, "keys": null, "data": {}, "inV": 15457, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "HMGCS1 gene", "ID": "Dna17", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15458, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000112972"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15458, "keys": null, "data": {}, "inV": 15459, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "FDFT1 gene", "ID": "Dna16", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15460, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000079459"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15460, "keys": null, "data": {}, "inV": 15461, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "TM7SF2 gene", "ID": "Dna20", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15462, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000149809"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15462, "keys": null, "data": {}, "inV": 15463, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "GPAM gene", "ID": "Dna21", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15464, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000119927"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15464, "keys": null, "data": {}, "inV": 15465, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "FASN gene", "ID": "Dna22", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15466, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000169710"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15466, "keys": null, "data": {}, "inV": 15467, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "LSS gene", "ID": "Dna23", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15468, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000160285"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15468, "keys": null, "data": {}, "inV": 15469, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "MVD gene", "ID": "Dna24", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15470, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000167508"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15470, "keys": null, "data": {}, "inV": 15471, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "SC5DL gene", "ID": "Dna25", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15472, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000109929"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15472, "keys": null, "data": {}, "inV": 15473, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "CYP51A1 gene", "ID": "Dna26", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15474, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000067064"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15474, "keys": null, "data": {}, "inV": 15475, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "DHCR7 gene", "ID": "Dna27", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15476, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000172893"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15476, "keys": null, "data": {}, "inV": 15477, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "GGPS1 gene", "ID": "Dna28", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15478, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000152904"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15478, "keys": null, "data": {}, "inV": 15479, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "IDI1 gene", "ID": "Dna29", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15480, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000067064"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15480, "keys": null, "data": {}, "inV": 15481, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "SMAD7 gene", "ID": "Dna1", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15482, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000101665"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15482, "keys": null, "data": {}, "inV": 15483, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "MYC gene", "ID": "Dna3", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15484, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000136997"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15484, "keys": null, "data": {}, "inV": 15485, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "SERPINE1 gene", "ID": "Dna2", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15486, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000106366"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15486, "keys": null, "data": {}, "inV": 15487, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "JUNB gene", "ID": "Dna5", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15488, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000171223"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15488, "keys": null, "data": {}, "inV": 15489, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "CDKN2B gene", "ID": "Dna4", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15490, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000147883"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15490, "keys": null, "data": {}, "inV": 15491, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "NOTCH2 gene", "ID": "Dna7", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15492, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000134250"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15492, "keys": null, "data": {}, "inV": 15493, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "NOTCH1 gene", "ID": "Dna6", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15494, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000148400"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15494, "keys": null, "data": {}, "inV": 15495, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "NOTCH4 gene", "ID": "Dna9", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15496, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000206312"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15496, "keys": null, "data": {}, "inV": 15497, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA", "data": {"element_type": "DNA", "displayName": "NOTCH3 gene", "ID": "Dna8", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15498, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENSG00000074181"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15498, "keys": null, "data": {}, "inV": 15499, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "DNA Collection", "data": {"element_type": "DNA Collection", "displayName": "MIR34 genes", "ID": "Dna10", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15500, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR34C", "ID": "Rna18", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15501, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000743"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15501, "keys": null, "data": {}, "inV": 15502, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NOTCH3 mRNA", "ID": "Rna13", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15503, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000263388"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15503, "keys": null, "data": {}, "inV": 15504, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NOTCH2 mRNA", "ID": "Rna12", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15505, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000256646"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15505, "keys": null, "data": {}, "inV": 15506, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NOTCH1 mRNA", "ID": "Rna11", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15507, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000277541"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15507, "keys": null, "data": {}, "inV": 15508, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR26A2", "ID": "Rna10", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15509, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000750"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15509, "keys": null, "data": {}, "inV": 15510, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR34B", "ID": "Rna17", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15511, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000742"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15511, "keys": null, "data": {}, "inV": 15512, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR34A", "ID": "Rna16", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15513, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000268"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15513, "keys": null, "data": {}, "inV": 15514, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NOTCH4 mRNA", "ID": "Rna14", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15515, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000383264"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15515, "keys": null, "data": {}, "inV": 15516, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 1", "ID": "Rna93", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15517, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389115"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15517, "keys": null, "data": {}, "inV": 15518, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15517, "keys": null, "data": {}, "inV": 15519, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 8", "ID": "Rna92", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15520, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389122"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15520, "keys": null, "data": {}, "inV": 15521, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15520, "keys": null, "data": {}, "inV": 15522, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 6", "ID": "Rna91", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15523, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389120"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15523, "keys": null, "data": {}, "inV": 15524, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15523, "keys": null, "data": {}, "inV": 15525, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 3", "ID": "Rna90", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15526, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389117"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15526, "keys": null, "data": {}, "inV": 15527, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15526, "keys": null, "data": {}, "inV": 15528, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 7", "ID": "Rna97", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15529, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15529, "keys": null, "data": {}, "inV": 15530, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15529, "keys": null, "data": {}, "inV": 15531, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 4", "ID": "Rna96", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15532, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389118"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15532, "keys": null, "data": {}, "inV": 15533, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15532, "keys": null, "data": {}, "inV": 15534, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 2", "ID": "Rna95", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15535, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389116"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15535, "keys": null, "data": {}, "inV": 15536, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15535, "keys": null, "data": {}, "inV": 15537, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 3", "ID": "Rna94", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15538, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389117"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15538, "keys": null, "data": {}, "inV": 15539, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15538, "keys": null, "data": {}, "inV": 15540, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NA mRNA", "ID": "Rna104", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15541, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02146"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15541, "keys": null, "data": {}, "inV": 15542, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15541, "keys": null, "data": {}, "inV": 15543, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NP mRNA", "ID": "Rna105", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15544, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02147"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15544, "keys": null, "data": {}, "inV": 15545, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15544, "keys": null, "data": {}, "inV": 15546, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NS1 mRNA", "ID": "Rna106", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15547, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02150"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15547, "keys": null, "data": {}, "inV": 15548, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15547, "keys": null, "data": {}, "inV": 15549, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 5", "ID": "Rna98", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15550, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389119"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15550, "keys": null, "data": {}, "inV": 15551, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15550, "keys": null, "data": {}, "inV": 15552, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HA mRNA", "ID": "Rna101", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15553, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V01088"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15553, "keys": null, "data": {}, "inV": 15554, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15553, "keys": null, "data": {}, "inV": 15555, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "M1 mRNA", "ID": "Rna102", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15556, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15556, "keys": null, "data": {}, "inV": 15557, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15556, "keys": null, "data": {}, "inV": 15558, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "M2 mRNA", "ID": "Rna103", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15559, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15559, "keys": null, "data": {}, "inV": 15560, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15559, "keys": null, "data": {}, "inV": 15561, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "PB1 mRNA", "ID": "Rna119", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15562, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02151"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15562, "keys": null, "data": {}, "inV": 15563, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15562, "keys": null, "data": {}, "inV": 15564, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NS1 mRNA", "ID": "Rna118", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15565, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02150"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15565, "keys": null, "data": {}, "inV": 15566, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15565, "keys": null, "data": {}, "inV": 15567, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 1", "ID": "Rna88", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15568, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389115"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15568, "keys": null, "data": {}, "inV": 15569, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15568, "keys": null, "data": {}, "inV": 15570, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 8", "ID": "Rna89", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15571, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389122"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15571, "keys": null, "data": {}, "inV": 15572, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15571, "keys": null, "data": {}, "inV": 15573, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 5", "ID": "Rna84", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15574, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389119"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15574, "keys": null, "data": {}, "inV": 15575, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15574, "keys": null, "data": {}, "inV": 15576, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 6", "ID": "Rna85", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15577, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389120"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15577, "keys": null, "data": {}, "inV": 15578, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15577, "keys": null, "data": {}, "inV": 15579, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 2", "ID": "Rna86", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15580, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389116"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15580, "keys": null, "data": {}, "inV": 15581, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15580, "keys": null, "data": {}, "inV": 15582, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 4", "ID": "Rna87", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15583, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389118"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15583, "keys": null, "data": {}, "inV": 15584, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15583, "keys": null, "data": {}, "inV": 15585, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 5", "ID": "Rna80", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15586, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389119"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15586, "keys": null, "data": {}, "inV": 15587, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15586, "keys": null, "data": {}, "inV": 15588, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 6", "ID": "Rna81", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15589, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389120"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15589, "keys": null, "data": {}, "inV": 15590, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15589, "keys": null, "data": {}, "inV": 15591, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 2", "ID": "Rna82", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15592, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389116"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15592, "keys": null, "data": {}, "inV": 15593, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15592, "keys": null, "data": {}, "inV": 15594, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 7", "ID": "Rna83", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15595, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15595, "keys": null, "data": {}, "inV": 15596, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15595, "keys": null, "data": {}, "inV": 15597, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR26A1", "ID": "Rna9", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15598, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000083"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15598, "keys": null, "data": {}, "inV": 15599, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NS2 mRNA", "ID": "Rna112", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15600, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02150"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15600, "keys": null, "data": {}, "inV": 15601, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15600, "keys": null, "data": {}, "inV": 15602, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "PTEN mRNA", "ID": "Rna7", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15603, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000371953"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15603, "keys": null, "data": {}, "inV": 15604, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "18S rRNA", "ID": "Rna6", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15605, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X03205"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15605, "keys": null, "data": {}, "inV": 15606, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Ceruloplasmin mRNA", "ID": "Rna5", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15607, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "M13699"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15607, "keys": null, "data": {}, "inV": 15608, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "5S rRNA", "ID": "Rna4", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15697, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V00589"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15697, "keys": null, "data": {}, "inV": 15698, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "5.8S rRNA", "ID": "Rna3", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15699, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J01866"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15699, "keys": null, "data": {}, "inV": 15700, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "28S rRNA", "ID": "Rna2", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15701, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "M11167"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15701, "keys": null, "data": {}, "inV": 15702, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Telomerase RNA Component (TERC)", "ID": "Rna1", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15703, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "U86046"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15703, "keys": null, "data": {}, "inV": 15704, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 4", "ID": "Rna71", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15705, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389118"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15705, "keys": null, "data": {}, "inV": 15706, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15705, "keys": null, "data": {}, "inV": 15707, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 3", "ID": "Rna70", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15708, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389117"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15708, "keys": null, "data": {}, "inV": 15709, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15708, "keys": null, "data": {}, "inV": 15710, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 7", "ID": "Rna73", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15711, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15711, "keys": null, "data": {}, "inV": 15712, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15711, "keys": null, "data": {}, "inV": 15713, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 2", "ID": "Rna72", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15714, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389116"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15714, "keys": null, "data": {}, "inV": 15715, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15714, "keys": null, "data": {}, "inV": 15716, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 7", "ID": "Rna75", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15717, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15717, "keys": null, "data": {}, "inV": 15718, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15717, "keys": null, "data": {}, "inV": 15719, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 6", "ID": "Rna74", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15720, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389120"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15720, "keys": null, "data": {}, "inV": 15721, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15720, "keys": null, "data": {}, "inV": 15722, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 1", "ID": "Rna77", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15723, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389115"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15723, "keys": null, "data": {}, "inV": 15724, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15723, "keys": null, "data": {}, "inV": 15725, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 3", "ID": "Rna76", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15726, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389117"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15726, "keys": null, "data": {}, "inV": 15727, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15726, "keys": null, "data": {}, "inV": 15728, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 8", "ID": "Rna79", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15729, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389122"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15729, "keys": null, "data": {}, "inV": 15730, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15729, "keys": null, "data": {}, "inV": 15731, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 4", "ID": "Rna78", "localization": "CellularLocationVocabulary29"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15732, "keys": null, "data": {}, "inV": 15383, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389118"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15732, "keys": null, "data": {}, "inV": 15733, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15732, "keys": null, "data": {}, "inV": 15734, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "viral RNA template being digested by RNase-H (extensive)", "ID": "Rna62", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15735, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15735, "keys": null, "data": {}, "inV": 15736, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15735, "keys": null, "data": {}, "inV": 15737, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "viral RNA template extensively digested except in PPT region", "ID": "Rna63", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15738, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15738, "keys": null, "data": {}, "inV": 15739, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15738, "keys": null, "data": {}, "inV": 15740, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "other viral genomic RNA", "ID": "Rna60", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15741, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15741, "keys": null, "data": {}, "inV": 15742, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15741, "keys": null, "data": {}, "inV": 15743, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "viral RNA template degraded by RNase-H (initial)", "ID": "Rna61", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15744, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15744, "keys": null, "data": {}, "inV": 15745, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15744, "keys": null, "data": {}, "inV": 15746, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HIV-1 unspliced RNA", "ID": "Rna66", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15747, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15747, "keys": null, "data": {}, "inV": 15748, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15747, "keys": null, "data": {}, "inV": 15749, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 1", "ID": "Rna67", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15750, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389115"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15750, "keys": null, "data": {}, "inV": 15751, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15750, "keys": null, "data": {}, "inV": 15752, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HIV-1 mRNA", "ID": "Rna64", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15753, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15753, "keys": null, "data": {}, "inV": 15754, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15753, "keys": null, "data": {}, "inV": 15755, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HIV-1 mRNA", "ID": "Rna65", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15756, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15756, "keys": null, "data": {}, "inV": 15757, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15756, "keys": null, "data": {}, "inV": 15758, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 8", "ID": "Rna68", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15759, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389122"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15759, "keys": null, "data": {}, "inV": 15760, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15759, "keys": null, "data": {}, "inV": 15761, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Genomic RNA Segment 5", "ID": "Rna69", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15762, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389119"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15762, "keys": null, "data": {}, "inV": 15763, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15762, "keys": null, "data": {}, "inV": 15764, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "M2 mRNA", "ID": "Rna111", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15765, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15765, "keys": null, "data": {}, "inV": 15766, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15765, "keys": null, "data": {}, "inV": 15767, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NP mRNA", "ID": "Rna117", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15768, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02147"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15768, "keys": null, "data": {}, "inV": 15769, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15768, "keys": null, "data": {}, "inV": 15770, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NA mRNA", "ID": "Rna116", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15771, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02146"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15771, "keys": null, "data": {}, "inV": 15772, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15771, "keys": null, "data": {}, "inV": 15773, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "M1 mRNA", "ID": "Rna115", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15774, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF389121"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15774, "keys": null, "data": {}, "inV": 15775, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15774, "keys": null, "data": {}, "inV": 15776, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HA mRNA", "ID": "Rna114", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15777, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V01088"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15777, "keys": null, "data": {}, "inV": 15778, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15777, "keys": null, "data": {}, "inV": 15779, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HIV-1 RNA template", "ID": "Rna59", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15780, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15780, "keys": null, "data": {}, "inV": 15781, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15780, "keys": null, "data": {}, "inV": 15782, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "HIV-1 RNA", "ID": "Rna58", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15783, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AF033819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15783, "keys": null, "data": {}, "inV": 15784, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Human immunodeficiency virus 1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15783, "keys": null, "data": {}, "inV": 15785, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "H19 noncoding RNA", "ID": "Rna55", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15786, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000252900"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15786, "keys": null, "data": {}, "inV": 15787, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "CD44 mRNA isoform 205", "ID": "Rna54", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15788, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000352818"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15788, "keys": null, "data": {}, "inV": 15789, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "CD44 mRNA isoform 204", "ID": "Rna53", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15790, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000279452"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15790, "keys": null, "data": {}, "inV": 15791, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "CD44 mRNA isoform 203", "ID": "Rna52", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15792, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000278386"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15792, "keys": null, "data": {}, "inV": 15793, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "CD44 mRNA isoform 202", "ID": "Rna51", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15794, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000278385"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15794, "keys": null, "data": {}, "inV": 15795, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "CD44 mRNA isoform 201", "ID": "Rna50", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15796, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000263398"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15796, "keys": null, "data": {}, "inV": 15797, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "P1 mRNA", "ID": "Rna108", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15798, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02151"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15798, "keys": null, "data": {}, "inV": 15799, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15798, "keys": null, "data": {}, "inV": 15800, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "PA mRNA", "ID": "Rna109", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15801, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V01106"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15801, "keys": null, "data": {}, "inV": 15802, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15801, "keys": null, "data": {}, "inV": 15803, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Beta-actin mRNA isoform 001", "ID": "Rna48", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15804, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000331789"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15804, "keys": null, "data": {}, "inV": 15805, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MYC mRNA isoform 201", "ID": "Rna49", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15806, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000377970"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15806, "keys": null, "data": {}, "inV": 15807, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U5 snRNA", "ID": "Rna40", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15808, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X04293"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15808, "keys": null, "data": {}, "inV": 15809, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U6 snRNA", "ID": "Rna41", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15810, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X59362"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15810, "keys": null, "data": {}, "inV": 15811, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "7SL RNA (ENST00000410687)", "ID": "Rna43", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15812, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000410687"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15812, "keys": null, "data": {}, "inV": 15813, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "7SL RNA (ENST00000410707)", "ID": "Rna44", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15814, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000410707"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15814, "keys": null, "data": {}, "inV": 15815, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "IGF2-001 mRNA", "ID": "Rna46", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15816, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000381406"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15816, "keys": null, "data": {}, "inV": 15817, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "IGF2-002 mRNA", "ID": "Rna47", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15818, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ENSEMBL", "payload": "ENST00000337883"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15818, "keys": null, "data": {}, "inV": 15819, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "NS2 mRNA", "ID": "Rna107", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15820, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "J02150"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15820, "keys": null, "data": {}, "inV": 15821, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15820, "keys": null, "data": {}, "inV": 15822, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U4 snRNA", "ID": "Rna39", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15823, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X59361"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15823, "keys": null, "data": {}, "inV": 15824, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U2 snRNA", "ID": "Rna38", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15825, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X59360"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15825, "keys": null, "data": {}, "inV": 15826, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U6 snRNA", "ID": "Rna35", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15827, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X59362"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15827, "keys": null, "data": {}, "inV": 15828, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U5 snRNA", "ID": "Rna34", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15829, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X04293"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15829, "keys": null, "data": {}, "inV": 15830, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U1 snRNA", "ID": "Rna37", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15831, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V00590"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15831, "keys": null, "data": {}, "inV": 15832, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U1 snRNA", "ID": "Rna31", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15833, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V00590"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15833, "keys": null, "data": {}, "inV": 15834, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U4 snRNA", "ID": "Rna33", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15835, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X59361"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15835, "keys": null, "data": {}, "inV": 15836, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "U2 snRNA", "ID": "Rna32", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15837, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "X59360"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15837, "keys": null, "data": {}, "inV": 15838, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Xbp1 mRNA (unspliced)", "ID": "Rna123", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15839, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "PA mRNA", "ID": "Rna120", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15840, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "V01106"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15840, "keys": null, "data": {}, "inV": 15841, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15840, "keys": null, "data": {}, "inV": 15842, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "PB2 mRNA", "ID": "Rna121", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15843, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "EMBL", "payload": "AAM75155.1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15843, "keys": null, "data": {}, "inV": 15844, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "organism", "payload": "Influenza A virus"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15843, "keys": null, "data": {}, "inV": 15845, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "Xbp1 mRNA (spliced)", "ID": "Rna124", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15846, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR181C", "ID": "Rna28", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15847, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000271"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15847, "keys": null, "data": {}, "inV": 15848, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR302A", "ID": "Rna29", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15849, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000738"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15849, "keys": null, "data": {}, "inV": 15850, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR150", "ID": "Rna26", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15851, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000479"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15851, "keys": null, "data": {}, "inV": 15852, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR206", "ID": "Rna27", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15853, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000490"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15853, "keys": null, "data": {}, "inV": 15854, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR449B", "ID": "Rna24", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15855, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0003673"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15855, "keys": null, "data": {}, "inV": 15856, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR449C", "ID": "Rna25", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15857, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0003823"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15857, "keys": null, "data": {}, "inV": 15858, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR449A", "ID": "Rna23", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15859, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0001648"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15859, "keys": null, "data": {}, "inV": 15860, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR200B", "ID": "Rna20", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15861, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000342"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15861, "keys": null, "data": {}, "inV": 15862, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA", "data": {"element_type": "RNA", "displayName": "MIR200C", "ID": "Rna21", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15863, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "miRBase", "payload": "MI0000650"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15863, "keys": null, "data": {}, "inV": 15864, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "MIR200B/C", "ID": "Rna19", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15865, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "vRNA (genomic)", "ID": "Rna99", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15866, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "miR-26A", "ID": "Rna8", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15867, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "Spliceosome snRNAs", "ID": "Rna36", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15868, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "MIR449", "ID": "Rna22", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15869, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "Spliceosome snRNAs", "ID": "Rna30", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15870, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "MIR34", "ID": "Rna15", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15871, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "vRNA (genomic)", "ID": "Rna122", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15872, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "viral mRNA", "ID": "Rna113", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15873, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "RNA molecules bound by IGF2BP3 (IMP3/VICKZ3)", "ID": "Rna57", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15874, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "RNA molecules bound by IGF2BP2 (IMP2/VICKZ2)", "ID": "Rna56", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15875, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "7SL RNA", "ID": "Rna42", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15876, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "viral mRNA", "ID": "Rna110", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15877, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "Elongating viral mRNA", "ID": "Rna100", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15878, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "RNA_Collection", "data": {"element_type": "RNA_Collection", "displayName": "RNA molecules bound by IGF2BP1 (IMP1/CRD-BP/ZBP1/VICKZ1)", "ID": "Rna45", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15879, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Val", "ID": "SmallMolecule99", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15880, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16414"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15880, "keys": null, "data": {}, "inV": 15881, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Tyr", "ID": "SmallMolecule98", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15882, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17895"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15882, "keys": null, "data": {}, "inV": 15883, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Pro", "ID": "SmallMolecule95", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15884, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17203"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15884, "keys": null, "data": {}, "inV": 15885, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Phe", "ID": "SmallMolecule94", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15886, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17295"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15886, "keys": null, "data": {}, "inV": 15887, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Trp", "ID": "SmallMolecule97", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15888, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16828"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15888, "keys": null, "data": {}, "inV": 15889, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Thr", "ID": "SmallMolecule96", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15890, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "6308"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15890, "keys": null, "data": {}, "inV": 15891, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Leu", "ID": "SmallMolecule91", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15892, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15603"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15892, "keys": null, "data": {}, "inV": 15893, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Ile", "ID": "SmallMolecule90", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15894, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17191"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15894, "keys": null, "data": {}, "inV": 15895, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Met", "ID": "SmallMolecule93", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15896, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16643"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15896, "keys": null, "data": {}, "inV": 15897, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Lys", "ID": "SmallMolecule92", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15898, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18019"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15898, "keys": null, "data": {}, "inV": 15899, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "OGUA", "ID": "SmallMolecule1269", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15900, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29116"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15900, "keys": null, "data": {}, "inV": 15901, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Actos", "ID": "SmallMolecule1268", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15902, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "8228"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15902, "keys": null, "data": {}, "inV": 15903, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HNK-1 carbohydrate", "ID": "SmallMolecule1263", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15904, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "53170"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15904, "keys": null, "data": {}, "inV": 15905, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "E1", "ID": "SmallMolecule1262", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15906, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17263"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15906, "keys": null, "data": {}, "inV": 15907, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "EST17b", "ID": "SmallMolecule1261", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15908, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16469"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15908, "keys": null, "data": {}, "inV": 15909, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HCOOH", "ID": "SmallMolecule1260", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15910, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "30751"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15910, "keys": null, "data": {}, "inV": 15911, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "RGZ", "ID": "SmallMolecule1267", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15912, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "50122"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15912, "keys": null, "data": {}, "inV": 15913, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "9S-HODE", "ID": "SmallMolecule1266", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15914, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "34496"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15914, "keys": null, "data": {}, "inV": 15915, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "13(S')-HODE", "ID": "SmallMolecule1265", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15916, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "34154"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15916, "keys": null, "data": {}, "inV": 15917, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "O2", "ID": "SmallMolecule1281", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15918, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15379"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15918, "keys": null, "data": {}, "inV": 15919, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Deoxynucleoside triphosphate", "ID": "SmallMolecule1280", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15920, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16516"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15920, "keys": null, "data": {}, "inV": 15921, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SUCCA", "ID": "SmallMolecule1283", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15922, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15741"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15922, "keys": null, "data": {}, "inV": 15923, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "2OG", "ID": "SmallMolecule1282", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15924, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "30915"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15924, "keys": null, "data": {}, "inV": 15925, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CH2O", "ID": "SmallMolecule1285", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15926, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16842"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15926, "keys": null, "data": {}, "inV": 15927, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CO2", "ID": "SmallMolecule1284", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15928, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16526"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15928, "keys": null, "data": {}, "inV": 15929, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CH3CHO", "ID": "SmallMolecule1287", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15930, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15343"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15930, "keys": null, "data": {}, "inV": 15931, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Fe2+", "ID": "SmallMolecule1286", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15932, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18248"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15932, "keys": null, "data": {}, "inV": 15933, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PIP3", "ID": "SmallMolecule1289", "localization": "CellularLocationVocabulary14"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15934, "keys": null, "data": {}, "inV": 15354, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16618"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15934, "keys": null, "data": {}, "inV": 15935, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PIP3", "ID": "SmallMolecule1288", "localization": "CellularLocationVocabulary30"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15936, "keys": null, "data": {}, "inV": 15371, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16618"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15936, "keys": null, "data": {}, "inV": 15937, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dCDP", "ID": "SmallMolecule2260", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15938, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28846"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15938, "keys": null, "data": {}, "inV": 15939, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dUDP", "ID": "SmallMolecule2261", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15940, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28850"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15940, "keys": null, "data": {}, "inV": 15941, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CDP", "ID": "SmallMolecule2266", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15942, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17239"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15942, "keys": null, "data": {}, "inV": 15943, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UDP", "ID": "SmallMolecule2267", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15944, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17659"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15944, "keys": null, "data": {}, "inV": 15945, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dUTP", "ID": "SmallMolecule2264", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15946, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17625"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15946, "keys": null, "data": {}, "inV": 15947, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CI-1033", "ID": "SmallMolecule1111", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15948, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "61399"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15948, "keys": null, "data": {}, "inV": 15949, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HKI-272", "ID": "SmallMolecule1110", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15950, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "61390"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15950, "keys": null, "data": {}, "inV": 15951, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GAG", "ID": "SmallMolecule1113", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15952, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18085"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15952, "keys": null, "data": {}, "inV": 15953, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Afatinib", "ID": "SmallMolecule1112", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15954, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "61390"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15954, "keys": null, "data": {}, "inV": 15955, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Gangliosides", "ID": "SmallMolecule1115", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15956, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28892"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15956, "keys": null, "data": {}, "inV": 15957, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dsDNA", "ID": "SmallMolecule1114", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15958, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16991"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15958, "keys": null, "data": {}, "inV": 15959, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Gangliosides", "ID": "SmallMolecule1116", "localization": "CellularLocationVocabulary14"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15960, "keys": null, "data": {}, "inV": 15354, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28892"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15960, "keys": null, "data": {}, "inV": 15961, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "E3810", "ID": "SmallMolecule1119", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15962, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "65138"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15962, "keys": null, "data": {}, "inV": 15963, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "TKI258", "ID": "SmallMolecule1118", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15964, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "594834"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15964, "keys": null, "data": {}, "inV": 15965, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "FMN", "ID": "SmallMolecule2466", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15966, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17621"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15966, "keys": null, "data": {}, "inV": 15967, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "OX", "ID": "SmallMolecule2467", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15968, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "7811"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15968, "keys": null, "data": {}, "inV": 15969, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Glyoxylate", "ID": "SmallMolecule2460", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15970, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5509"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15970, "keys": null, "data": {}, "inV": 15971, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "NH4+", "ID": "SmallMolecule2461", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15972, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28938"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15972, "keys": null, "data": {}, "inV": 15973, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Ala", "ID": "SmallMolecule2462", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15974, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16977"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15974, "keys": null, "data": {}, "inV": 15975, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PYR", "ID": "SmallMolecule2463", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15976, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "32816"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15976, "keys": null, "data": {}, "inV": 15977, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "15k-PGD2", "ID": "SmallMolecule1947", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15978, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "249"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15978, "keys": null, "data": {}, "inV": 15979, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "T3", "ID": "SmallMolecule657", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15980, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28774"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15980, "keys": null, "data": {}, "inV": 15981, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "4-cis-decenoyl-CoA", "ID": "SmallMolecule1609", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15982, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29140"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15982, "keys": null, "data": {}, "inV": 15983, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "trans,cis-Lauro-2,6-dienoyl-CoA", "ID": "SmallMolecule1608", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15984, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28387"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15984, "keys": null, "data": {}, "inV": 15985, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PGJ2", "ID": "SmallMolecule1940", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15986, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "8521"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15986, "keys": null, "data": {}, "inV": 15987, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "16-HETE", "ID": "SmallMolecule2008", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15988, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "63994"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15988, "keys": null, "data": {}, "inV": 15989, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "17-HETE", "ID": "SmallMolecule2009", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15990, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "63995"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15990, "keys": null, "data": {}, "inV": 15991, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "TrXB3", "ID": "SmallMolecule2006", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15992, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "35032"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15992, "keys": null, "data": {}, "inV": 15993, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "delta12-PGJ2", "ID": "SmallMolecule1941", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15994, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "10537"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15994, "keys": null, "data": {}, "inV": 15995, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HXA3", "ID": "SmallMolecule2002", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15996, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5670"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15996, "keys": null, "data": {}, "inV": 15997, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HXB3", "ID": "SmallMolecule2003", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15998, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "34784"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 15998, "keys": null, "data": {}, "inV": 15999, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dhk-LXA4", "ID": "SmallMolecule2000", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16000, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "63993"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16000, "keys": null, "data": {}, "inV": 16001, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ACA-CoA", "ID": "SmallMolecule1605", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16002, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15345"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16002, "keys": null, "data": {}, "inV": 16003, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "gamma-glutamyl group", "ID": "SmallMolecule2657", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16004, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "24190"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16004, "keys": null, "data": {}, "inV": 16005, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "3HB-CoA", "ID": "SmallMolecule1604", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16006, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15453"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16006, "keys": null, "data": {}, "inV": 16007, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "cis,cis-3,6-Dodecadienoyl-CoA", "ID": "SmallMolecule1607", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16008, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28002"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16008, "keys": null, "data": {}, "inV": 16009, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "LIN-CoA", "ID": "SmallMolecule1606", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16010, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15530"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16010, "keys": null, "data": {}, "inV": 16011, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "T4", "ID": "SmallMolecule655", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16012, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "7663"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16012, "keys": null, "data": {}, "inV": 16013, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "(S)-Hydroxyhexanoyl-CoA", "ID": "SmallMolecule1600", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16014, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28276"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16014, "keys": null, "data": {}, "inV": 16015, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CMP", "ID": "SmallMolecule1847", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16016, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17361"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16016, "keys": null, "data": {}, "inV": 16017, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PGP", "ID": "SmallMolecule1846", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16018, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "37393"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16018, "keys": null, "data": {}, "inV": 16019, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CDP-DAG", "ID": "SmallMolecule1845", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16020, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17962"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16020, "keys": null, "data": {}, "inV": 16021, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CTP", "ID": "SmallMolecule1844", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16022, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17677"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16022, "keys": null, "data": {}, "inV": 16023, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PA", "ID": "SmallMolecule1843", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16024, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16337"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16024, "keys": null, "data": {}, "inV": 16025, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Crotonoyl-CoA", "ID": "SmallMolecule1603", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16026, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15473"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16026, "keys": null, "data": {}, "inV": 16027, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "1-acyl LPI", "ID": "SmallMolecule1841", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16028, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28914"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16028, "keys": null, "data": {}, "inV": 16029, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PI", "ID": "SmallMolecule1840", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16030, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16749"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16030, "keys": null, "data": {}, "inV": 16031, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "4MAA", "ID": "SmallMolecule2396", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16032, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17105"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16032, "keys": null, "data": {}, "inV": 16033, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "4FAA", "ID": "SmallMolecule2397", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16034, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18034"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16034, "keys": null, "data": {}, "inV": 16035, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HGTA", "ID": "SmallMolecule2394", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16036, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16169"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16036, "keys": null, "data": {}, "inV": 16037, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "BT-CoA", "ID": "SmallMolecule1602", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16038, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15517"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16038, "keys": null, "data": {}, "inV": 16039, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "qDHB", "ID": "SmallMolecule2392", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16040, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "20680"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16040, "keys": null, "data": {}, "inV": 16041, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "4-Hydroxyphenylpyruvate", "ID": "SmallMolecule2393", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16042, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1431"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16042, "keys": null, "data": {}, "inV": 16043, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "1-acyl LPG", "ID": "SmallMolecule1849", "localization": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16044, "keys": null, "data": {}, "inV": 15351, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62747"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16044, "keys": null, "data": {}, "inV": 16045, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PG", "ID": "SmallMolecule1848", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16046, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17517"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16046, "keys": null, "data": {}, "inV": 16047, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GAR", "ID": "SmallMolecule2132", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16048, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18349"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16048, "keys": null, "data": {}, "inV": 16049, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "10-formyl-THF", "ID": "SmallMolecule2133", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16050, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15637"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16050, "keys": null, "data": {}, "inV": 16051, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "IMP", "ID": "SmallMolecule2130", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16052, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17202"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16052, "keys": null, "data": {}, "inV": 16053, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PRA", "ID": "SmallMolecule2131", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16054, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17284"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16054, "keys": null, "data": {}, "inV": 16055, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "FGAM", "ID": "SmallMolecule2136", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16056, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18413"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16056, "keys": null, "data": {}, "inV": 16057, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "AIR", "ID": "SmallMolecule2137", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16058, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28843"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16058, "keys": null, "data": {}, "inV": 16059, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "THF", "ID": "SmallMolecule2134", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16060, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15635"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16060, "keys": null, "data": {}, "inV": 16061, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "N-Formyl-GAR", "ID": "SmallMolecule2135", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16062, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18272"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16062, "keys": null, "data": {}, "inV": 16063, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CAIR", "ID": "SmallMolecule2138", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16064, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28413"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16064, "keys": null, "data": {}, "inV": 16065, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SAICAR", "ID": "SmallMolecule2139", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16066, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18319"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16066, "keys": null, "data": {}, "inV": 16067, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MMETOH", "ID": "SmallMolecule2648", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16068, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "63861"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16068, "keys": null, "data": {}, "inV": 16069, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PY", "ID": "SmallMolecule2649", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16070, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16227"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16070, "keys": null, "data": {}, "inV": 16071, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "S2O3(2-)", "ID": "SmallMolecule2482", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16072, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16094"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16072, "keys": null, "data": {}, "inV": 16073, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GSH", "ID": "SmallMolecule2483", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16074, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16856"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16074, "keys": null, "data": {}, "inV": 16075, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "H+", "ID": "SmallMolecule2480", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16076, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15378"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16076, "keys": null, "data": {}, "inV": 16077, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "sulfite(2-)", "ID": "SmallMolecule2481", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16078, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17359"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16078, "keys": null, "data": {}, "inV": 16079, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "H2O2", "ID": "SmallMolecule2486", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16080, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16240"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16080, "keys": null, "data": {}, "inV": 16081, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MoCo (dioxyo)", "ID": "SmallMolecule2487", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16082, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "25372"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16082, "keys": null, "data": {}, "inV": 16083, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GSSG", "ID": "SmallMolecule2484", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16084, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17858"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16084, "keys": null, "data": {}, "inV": 16085, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "H2S", "ID": "SmallMolecule2485", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16086, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5787"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16086, "keys": null, "data": {}, "inV": 16087, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dALA", "ID": "SmallMolecule2488", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16088, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "2034"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16088, "keys": null, "data": {}, "inV": 16089, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dALA", "ID": "SmallMolecule2489", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16090, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "2034"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16090, "keys": null, "data": {}, "inV": 16091, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "TAU", "ID": "SmallMolecule285", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16092, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15891"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16092, "keys": null, "data": {}, "inV": 16093, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HPRO", "ID": "SmallMolecule281", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16094, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1852"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16094, "keys": null, "data": {}, "inV": 16095, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "TAU", "ID": "SmallMolecule283", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16096, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15891"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16096, "keys": null, "data": {}, "inV": 16097, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "(2R) Pristanoyl-CoA", "ID": "SmallMolecule1644", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16098, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "51341"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16098, "keys": null, "data": {}, "inV": 16099, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "pAHP", "ID": "SmallMolecule519", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16100, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "104011"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16100, "keys": null, "data": {}, "inV": 16101, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CLQ", "ID": "SmallMolecule515", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16102, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "3638"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16102, "keys": null, "data": {}, "inV": 16103, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "2OG", "ID": "SmallMolecule517", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16104, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "30915"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16104, "keys": null, "data": {}, "inV": 16105, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "QND", "ID": "SmallMolecule516", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16106, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "8719"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16106, "keys": null, "data": {}, "inV": 16107, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CAR", "ID": "SmallMolecule510", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16108, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17126"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16108, "keys": null, "data": {}, "inV": 16109, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "QND", "ID": "SmallMolecule513", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16110, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "8719"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16110, "keys": null, "data": {}, "inV": 16111, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CLQ", "ID": "SmallMolecule512", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16112, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "3638"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16112, "keys": null, "data": {}, "inV": 16113, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Glu", "ID": "SmallMolecule353", "localization": "CellularLocationVocabulary26"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16114, "keys": null, "data": {}, "inV": 15382, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16015"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16114, "keys": null, "data": {}, "inV": 16115, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Asp", "ID": "SmallMolecule352", "localization": "CellularLocationVocabulary26"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16116, "keys": null, "data": {}, "inV": 15382, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17053"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16116, "keys": null, "data": {}, "inV": 16117, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Asn", "ID": "SmallMolecule351", "localization": "CellularLocationVocabulary26"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16118, "keys": null, "data": {}, "inV": 15382, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17196"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16118, "keys": null, "data": {}, "inV": 16119, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MLT", "ID": "SmallMolecule821", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16120, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "6730"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16120, "keys": null, "data": {}, "inV": 16121, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HCO3-", "ID": "SmallMolecule189", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16122, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17544"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16122, "keys": null, "data": {}, "inV": 16123, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PAF", "ID": "SmallMolecule820", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16124, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "52450"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16124, "keys": null, "data": {}, "inV": 16125, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "S1P", "ID": "SmallMolecule822", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16126, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "9225"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16126, "keys": null, "data": {}, "inV": 16127, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PAP", "ID": "SmallMolecule601", "localization": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16128, "keys": null, "data": {}, "inV": 15369, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17985"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16128, "keys": null, "data": {}, "inV": 16129, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UDP-GlcNAc", "ID": "SmallMolecule600", "localization": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16130, "keys": null, "data": {}, "inV": 15369, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16264"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16130, "keys": null, "data": {}, "inV": 16131, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PAPS", "ID": "SmallMolecule603", "localization": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16132, "keys": null, "data": {}, "inV": 15369, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17980"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16132, "keys": null, "data": {}, "inV": 16133, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PAPS", "ID": "SmallMolecule602", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16134, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17980"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16134, "keys": null, "data": {}, "inV": 16135, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UDP-Xyl", "ID": "SmallMolecule605", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16136, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "9813"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16136, "keys": null, "data": {}, "inV": 16137, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PAP", "ID": "SmallMolecule604", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16138, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17985"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16138, "keys": null, "data": {}, "inV": 16139, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GDP-Fuc", "ID": "SmallMolecule607", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16140, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5221"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16140, "keys": null, "data": {}, "inV": 16141, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UDP-xyl", "ID": "SmallMolecule606", "localization": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16142, "keys": null, "data": {}, "inV": 15369, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "9813"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16142, "keys": null, "data": {}, "inV": 16143, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UDP-GCU", "ID": "SmallMolecule609", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16144, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17200"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16144, "keys": null, "data": {}, "inV": 16145, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GDP-Fuc", "ID": "SmallMolecule608", "localization": "CellularLocationVocabulary32"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16146, "keys": null, "data": {}, "inV": 15369, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5221"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16146, "keys": null, "data": {}, "inV": 16147, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "tRNA(Tyr)", "ID": "SmallMolecule984", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16148, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29182"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16148, "keys": null, "data": {}, "inV": 16149, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Tyr-tRNA(Tyr)", "ID": "SmallMolecule985", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16150, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29161"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16150, "keys": null, "data": {}, "inV": 16151, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "tRNA(Trp)", "ID": "SmallMolecule982", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16152, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29181"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16152, "keys": null, "data": {}, "inV": 16153, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dADP", "ID": "SmallMolecule2268", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16154, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16174"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16154, "keys": null, "data": {}, "inV": 16155, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Trp-tRNA(Trp)", "ID": "SmallMolecule983", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16156, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29159"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16156, "keys": null, "data": {}, "inV": 16157, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "LINL", "ID": "SmallMolecule869", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16158, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "32386"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16158, "keys": null, "data": {}, "inV": 16159, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dGDP", "ID": "SmallMolecule2269", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16160, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28862"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16160, "keys": null, "data": {}, "inV": 16161, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "tRNA(Thr)", "ID": "SmallMolecule980", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16162, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29180"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16162, "keys": null, "data": {}, "inV": 16163, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ASP", "ID": "SmallMolecule861", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16164, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "2877"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16164, "keys": null, "data": {}, "inV": 16165, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Suc", "ID": "SmallMolecule860", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16166, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "9314"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16166, "keys": null, "data": {}, "inV": 16167, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PC", "ID": "SmallMolecule863", "localization": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16168, "keys": null, "data": {}, "inV": 15351, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16110"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16168, "keys": null, "data": {}, "inV": 16169, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SACC", "ID": "SmallMolecule862", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16170, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "32111"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16170, "keys": null, "data": {}, "inV": 16171, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "atROL", "ID": "SmallMolecule865", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16172, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17336"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16172, "keys": null, "data": {}, "inV": 16173, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "RPALM", "ID": "SmallMolecule864", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16174, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "8819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16174, "keys": null, "data": {}, "inV": 16175, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "betaC", "ID": "SmallMolecule867", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16176, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "10355"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16176, "keys": null, "data": {}, "inV": 16177, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "atROL", "ID": "SmallMolecule866", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16178, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17336"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16178, "keys": null, "data": {}, "inV": 16179, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Val", "ID": "SmallMolecule265", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16180, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16414"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16180, "keys": null, "data": {}, "inV": 16181, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Ile", "ID": "SmallMolecule264", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16182, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17191"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16182, "keys": null, "data": {}, "inV": 16183, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "b-Ala", "ID": "SmallMolecule269", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16184, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16958"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16184, "keys": null, "data": {}, "inV": 16185, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GABA", "ID": "SmallMolecule268", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16186, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16865"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16186, "keys": null, "data": {}, "inV": 16187, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ADR", "ID": "SmallMolecule465", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16188, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1942"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16188, "keys": null, "data": {}, "inV": 16189, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Hist", "ID": "SmallMolecule466", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16190, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18295"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16190, "keys": null, "data": {}, "inV": 16191, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "DA", "ID": "SmallMolecule461", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16192, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18243"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16192, "keys": null, "data": {}, "inV": 16193, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "DA", "ID": "SmallMolecule460", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16194, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18243"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16194, "keys": null, "data": {}, "inV": 16195, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "5HT", "ID": "SmallMolecule463", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16196, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28790"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16196, "keys": null, "data": {}, "inV": 16197, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "5HT", "ID": "SmallMolecule462", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16198, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28790"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16198, "keys": null, "data": {}, "inV": 16199, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "DA", "ID": "SmallMolecule469", "localization": "CellularLocationVocabulary48"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16200, "keys": null, "data": {}, "inV": 15404, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18243"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16200, "keys": null, "data": {}, "inV": 16201, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ADR", "ID": "SmallMolecule468", "localization": "CellularLocationVocabulary48"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16202, "keys": null, "data": {}, "inV": 15404, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1942"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16202, "keys": null, "data": {}, "inV": 16203, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "(24R, 25R) 3alpha,7alpha,24-trihydroxy-5beta-cholestanoyl-CoA", "ID": "SmallMolecule1736", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16204, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1701"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16204, "keys": null, "data": {}, "inV": 16205, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MeCbl", "ID": "SmallMolecule2468", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16206, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28115"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16206, "keys": null, "data": {}, "inV": 16207, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "B12r", "ID": "SmallMolecule2469", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16208, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "3786"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16208, "keys": null, "data": {}, "inV": 16209, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Glyoxylate", "ID": "SmallMolecule2464", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16210, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5509"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16210, "keys": null, "data": {}, "inV": 16211, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MSNO", "ID": "SmallMolecule1078", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16212, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "59637"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16212, "keys": null, "data": {}, "inV": 16213, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "nitrosomycothiol", "ID": "SmallMolecule1079", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16214, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "59637"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16214, "keys": null, "data": {}, "inV": 16215, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Glycolate", "ID": "SmallMolecule2465", "localization": "CellularLocationVocabulary38"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16216, "keys": null, "data": {}, "inV": 15373, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5475"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16216, "keys": null, "data": {}, "inV": 16217, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CO3(2-)", "ID": "SmallMolecule1072", "localization": "CellularLocationVocabulary46"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16218, "keys": null, "data": {}, "inV": 15396, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "41609"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16218, "keys": null, "data": {}, "inV": 16219, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Fe3+", "ID": "SmallMolecule1073", "localization": "CellularLocationVocabulary46"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16220, "keys": null, "data": {}, "inV": 15396, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29034"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16220, "keys": null, "data": {}, "inV": 16221, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GSNO", "ID": "SmallMolecule1070", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16222, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "50091"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16222, "keys": null, "data": {}, "inV": 16223, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GSH", "ID": "SmallMolecule1071", "localization": "CellularLocationVocabulary70"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16224, "keys": null, "data": {}, "inV": 15407, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16856"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16224, "keys": null, "data": {}, "inV": 16225, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "cofactor F420 (ox.)", "ID": "SmallMolecule1076", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16226, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1130536"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16226, "keys": null, "data": {}, "inV": 16227, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MSH", "ID": "SmallMolecule1077", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16228, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "7040"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16228, "keys": null, "data": {}, "inV": 16229, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "NO2", "ID": "SmallMolecule1074", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16230, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "33101"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16230, "keys": null, "data": {}, "inV": 16231, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "cofactor F420 (red.)", "ID": "SmallMolecule1075", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16232, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1500819"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16232, "keys": null, "data": {}, "inV": 16233, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Pi", "ID": "SmallMolecule1", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16234, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18367"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16234, "keys": null, "data": {}, "inV": 16235, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "IP6", "ID": "SmallMolecule1477", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16236, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "10603"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16236, "keys": null, "data": {}, "inV": 16237, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ADP", "ID": "SmallMolecule3", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16238, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16761"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16238, "keys": null, "data": {}, "inV": 16239, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ATP", "ID": "SmallMolecule2", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16240, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15422"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16240, "keys": null, "data": {}, "inV": 16241, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "IP3", "ID": "SmallMolecule1472", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16242, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16595"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16242, "keys": null, "data": {}, "inV": 16243, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ATP", "ID": "SmallMolecule4", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16244, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15422"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16244, "keys": null, "data": {}, "inV": 16245, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Pi", "ID": "SmallMolecule7", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16246, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18367"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16246, "keys": null, "data": {}, "inV": 16247, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "I(3,4,6)P3", "ID": "SmallMolecule1471", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16248, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62918"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16248, "keys": null, "data": {}, "inV": 16249, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CTP", "ID": "SmallMolecule9", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16250, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17677"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16250, "keys": null, "data": {}, "inV": 16251, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "5-PP-IP4", "ID": "SmallMolecule1478", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16252, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62928"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16252, "keys": null, "data": {}, "inV": 16253, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "1,5-(PP)2-IP3", "ID": "SmallMolecule1479", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16254, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62931"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16254, "keys": null, "data": {}, "inV": 16255, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Gln", "ID": "SmallMolecule88", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16256, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18050"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16256, "keys": null, "data": {}, "inV": 16257, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-His", "ID": "SmallMolecule89", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16258, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15971"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16258, "keys": null, "data": {}, "inV": 16259, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ACA", "ID": "SmallMolecule1618", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16260, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15344"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16260, "keys": null, "data": {}, "inV": 16261, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "bHBA", "ID": "SmallMolecule1619", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16262, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17066"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16262, "keys": null, "data": {}, "inV": 16263, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SUCC-CoA", "ID": "SmallMolecule1616", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16264, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15380"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16264, "keys": null, "data": {}, "inV": 16265, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Ala", "ID": "SmallMolecule83", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16266, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16977"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16266, "keys": null, "data": {}, "inV": 16267, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Gly", "ID": "SmallMolecule80", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16268, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15428"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16268, "keys": null, "data": {}, "inV": 16269, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "(Glc)1 (GlcNAc)2 (Man)9", "ID": "SmallMolecule81", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16270, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "59080"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16270, "keys": null, "data": {}, "inV": 16271, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Asp", "ID": "SmallMolecule86", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16272, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17053"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16272, "keys": null, "data": {}, "inV": 16273, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Glu", "ID": "SmallMolecule87", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16274, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16015"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16274, "keys": null, "data": {}, "inV": 16275, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Arg", "ID": "SmallMolecule84", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16276, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16467"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16276, "keys": null, "data": {}, "inV": 16277, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "L-Asn", "ID": "SmallMolecule85", "localization": "CellularLocationVocabulary16"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16278, "keys": null, "data": {}, "inV": 15356, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17196"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16278, "keys": null, "data": {}, "inV": 16279, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "EtCYS", "ID": "SmallMolecule1278", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16280, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29147"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16280, "keys": null, "data": {}, "inV": 16281, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SUGP", "ID": "SmallMolecule1279", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16282, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "33447"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16282, "keys": null, "data": {}, "inV": 16283, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Ura", "ID": "SmallMolecule1274", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16284, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17568"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16284, "keys": null, "data": {}, "inV": 16285, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "5OHU", "ID": "SmallMolecule1275", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16286, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29115"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16286, "keys": null, "data": {}, "inV": 16287, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Thy", "ID": "SmallMolecule1276", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16288, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17821"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16288, "keys": null, "data": {}, "inV": 16289, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Hydrouracil", "ID": "SmallMolecule1277", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16290, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15901"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16290, "keys": null, "data": {}, "inV": 16291, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MADE", "ID": "SmallMolecule1270", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16292, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1590"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16292, "keys": null, "data": {}, "inV": 16293, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "EtAD", "ID": "SmallMolecule1271", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16294, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "29146"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16294, "keys": null, "data": {}, "inV": 16295, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Hyp", "ID": "SmallMolecule1272", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16296, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17368"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16296, "keys": null, "data": {}, "inV": 16297, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "FAPY", "ID": "SmallMolecule1273", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16298, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "35877"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16298, "keys": null, "data": {}, "inV": 16299, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "H+", "ID": "SmallMolecule1292", "localization": "CellularLocationVocabulary48"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16300, "keys": null, "data": {}, "inV": 15404, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15378"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16300, "keys": null, "data": {}, "inV": 16301, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "NAd", "ID": "SmallMolecule1293", "localization": "CellularLocationVocabulary76"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16302, "keys": null, "data": {}, "inV": 15409, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16302, "keys": null, "data": {}, "inV": 16303, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "GDP", "ID": "SmallMolecule1290", "localization": "CellularLocationVocabulary52"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16304, "keys": null, "data": {}, "inV": 15391, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17552"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16304, "keys": null, "data": {}, "inV": 16305, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Pi", "ID": "SmallMolecule1291", "localization": "CellularLocationVocabulary52"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16306, "keys": null, "data": {}, "inV": 15391, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18367"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16306, "keys": null, "data": {}, "inV": 16307, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "NH4+", "ID": "SmallMolecule1296", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16308, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28938"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16308, "keys": null, "data": {}, "inV": 16309, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Glu", "ID": "SmallMolecule1297", "localization": "CellularLocationVocabulary76"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16310, "keys": null, "data": {}, "inV": 15409, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16015"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16310, "keys": null, "data": {}, "inV": 16311, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "3-Methoxy-4-hydroxyphenylglycol", "ID": "SmallMolecule1294", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16312, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16436"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16312, "keys": null, "data": {}, "inV": 16313, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "FAD", "ID": "SmallMolecule1295", "localization": "CellularLocationVocabulary31"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16314, "keys": null, "data": {}, "inV": 15372, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16238"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16314, "keys": null, "data": {}, "inV": 16315, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UDP", "ID": "SmallMolecule2256", "localization": "CellularLocationVocabulary5"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16316, "keys": null, "data": {}, "inV": 15418, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17659"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16316, "keys": null, "data": {}, "inV": 16317, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "AcCho", "ID": "SmallMolecule1298", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16318, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15355"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16318, "keys": null, "data": {}, "inV": 16319, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "H+", "ID": "SmallMolecule1299", "localization": "CellularLocationVocabulary78"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16320, "keys": null, "data": {}, "inV": 15413, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15378"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16320, "keys": null, "data": {}, "inV": 16321, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ADP", "ID": "SmallMolecule744", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16322, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16761"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16322, "keys": null, "data": {}, "inV": 16323, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "TDP", "ID": "SmallMolecule2251", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16324, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18075"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16324, "keys": null, "data": {}, "inV": 16325, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "dUDP", "ID": "SmallMolecule2250", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16326, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28850"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16326, "keys": null, "data": {}, "inV": 16327, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Iressa", "ID": "SmallMolecule1102", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16328, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "49668"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16328, "keys": null, "data": {}, "inV": 16329, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Tarceva", "ID": "SmallMolecule1101", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16330, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "114785"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16330, "keys": null, "data": {}, "inV": 16331, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "EKB-569", "ID": "SmallMolecule1107", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16332, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "38927"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16332, "keys": null, "data": {}, "inV": 16333, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Tykerb", "ID": "SmallMolecule1104", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16334, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "49603"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16334, "keys": null, "data": {}, "inV": 16335, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "ZD6474", "ID": "SmallMolecule1105", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16336, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "49960"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16336, "keys": null, "data": {}, "inV": 16337, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "WZ4002", "ID": "SmallMolecule1108", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16338, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "61400"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16338, "keys": null, "data": {}, "inV": 16339, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "TXA2", "ID": "SmallMolecule746", "localization": "CellularLocationVocabulary3"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16340, "keys": null, "data": {}, "inV": 15420, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "15627"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16340, "keys": null, "data": {}, "inV": 16341, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SPHM", "ID": "SmallMolecule2033", "localization": "CellularLocationVocabulary8"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16342, "keys": null, "data": {}, "inV": 15422, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17636"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16342, "keys": null, "data": {}, "inV": 16343, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "DAG", "ID": "SmallMolecule2032", "localization": "CellularLocationVocabulary8"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16344, "keys": null, "data": {}, "inV": 15422, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "18035"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16344, "keys": null, "data": {}, "inV": 16345, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "phytoceramide", "ID": "SmallMolecule2031", "localization": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16346, "keys": null, "data": {}, "inV": 15351, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "31998"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16346, "keys": null, "data": {}, "inV": 16347, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "DHCE", "ID": "SmallMolecule2030", "localization": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16348, "keys": null, "data": {}, "inV": 15351, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "31488"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16348, "keys": null, "data": {}, "inV": 16349, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SPAP", "ID": "SmallMolecule2037", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16350, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "9222"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16350, "keys": null, "data": {}, "inV": 16351, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "phytosphingosine", "ID": "SmallMolecule2036", "localization": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16352, "keys": null, "data": {}, "inV": 15351, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "46961"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16352, "keys": null, "data": {}, "inV": 16353, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SPHM", "ID": "SmallMolecule2035", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16354, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17636"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16354, "keys": null, "data": {}, "inV": 16355, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CERA", "ID": "SmallMolecule2034", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16356, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17761"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16356, "keys": null, "data": {}, "inV": 16357, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "HXAL", "ID": "SmallMolecule2039", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16358, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "5695"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16358, "keys": null, "data": {}, "inV": 16359, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "SPA", "ID": "SmallMolecule2038", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16360, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "9221"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16360, "keys": null, "data": {}, "inV": 16361, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "MLCL", "ID": "SmallMolecule1858", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16362, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "60430"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16362, "keys": null, "data": {}, "inV": 16363, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PC", "ID": "SmallMolecule1859", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16364, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "16110"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16364, "keys": null, "data": {}, "inV": 16365, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "UCA", "ID": "SmallMolecule2380", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16366, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "30817"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16366, "keys": null, "data": {}, "inV": 16367, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "2-acyl LPG", "ID": "SmallMolecule1850", "localization": "CellularLocationVocabulary11"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16368, "keys": null, "data": {}, "inV": 15351, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "27923"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16368, "keys": null, "data": {}, "inV": 16369, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "1-acyl LPG", "ID": "SmallMolecule1851", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16370, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62747"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16370, "keys": null, "data": {}, "inV": 16371, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "LCFA(-)", "ID": "SmallMolecule1852", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16372, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "57560"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16372, "keys": null, "data": {}, "inV": 16373, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "acyl-CoA", "ID": "SmallMolecule1853", "localization": "CellularLocationVocabulary39"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16374, "keys": null, "data": {}, "inV": 15374, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "2455"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16374, "keys": null, "data": {}, "inV": 16375, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "2-acyl LPG", "ID": "SmallMolecule1854", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16376, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "27923"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16376, "keys": null, "data": {}, "inV": 16377, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "PG", "ID": "SmallMolecule1855", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16378, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "17517"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16378, "keys": null, "data": {}, "inV": 16379, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "1-acyl LPG", "ID": "SmallMolecule1856", "localization": "CellularLocationVocabulary2"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16380, "keys": null, "data": {}, "inV": 15419, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62747"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16380, "keys": null, "data": {}, "inV": 16381, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "CL", "ID": "SmallMolecule1857", "localization": "CellularLocationVocabulary40"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16382, "keys": null, "data": {}, "inV": 15402, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "28494"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16382, "keys": null, "data": {}, "inV": 16383, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "Ascorbate radical", "ID": "SmallMolecule2107", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16384, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "59513"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16384, "keys": null, "data": {}, "inV": 16385, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "VitC", "ID": "SmallMolecule2106", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16386, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "2868"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16386, "keys": null, "data": {}, "inV": 16387, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "e-", "ID": "SmallMolecule2105", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16388, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "10545"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16388, "keys": null, "data": {}, "inV": 16389, "index_name": "is_annotated", "label": "is_annotated"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "Small_Molecule", "data": {"element_type": "Small_Molecule", "displayName": "BH3.", "ID": "SmallMolecule2104", "localization": "CellularLocationVocabulary1"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"label_var": "label", "outV": 16390, "keys": null, "data": {}, "inV": 15421, "index_name": "is_localized", "label": "is_localized"}, "script": "import org.neo4j.graphdb.DynamicRelationshipType;\n  neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  vertex = neo4j.getNodeById(outV)\n  relationshipType = DynamicRelationshipType.withName(label)\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forRelationships(index_name)\n    edge = vertex.createRelationshipTo(neo4j.getNodeById(inV),relationshipType)\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      edge.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(edge,entry.key,String.valueOf(entry.value))\n    }\n    index.add(edge,label_var,String.valueOf(label))\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return edge\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)\n    return e\n  }"} 
DEBUG    POST url:  http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script  
DEBUG    POST body: {"params": {"keys": null, "index_name": "AnnotNode", "data": {"element_type": "AnnotNode", "ptype": "ChEBI", "payload": "62772"}}, "script": "neo4j = g.getRawGraph()\n  manager = neo4j.index()\n  g.setMaxBufferSize(0)\n  g.startTransaction()\n  try {\n    index = manager.forNodes(index_name)\n    vertex = neo4j.createNode()\n    for (entry in data.entrySet()) {\n      if (entry.value == null) continue;\n      vertex.setProperty(entry.key,entry.value)\n      if (keys == null || keys.contains(entry.key))\n\tindex.add(vertex,entry.key,String.valueOf(entry.value))\n    }\n    g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS)\n    return vertex\n  } catch (e) {\n    g.stopTransaction(TransactionalGraph.Conclusion.FAILURE)  \n    return e\n  }"} 
